module compact_array

contains
    attributes(global) subroutine compaction_copy(d_out,d_indices,d_isValid,&
                                                  d_in,numElements,n_attri)
    !For particle transfer between neighbours
    !The first dimension of d_in equals that of d_indices and d_isValid
    !This dimension is the current np_active
    !d_indices is the inclusive Sum-Scan Result which is different from C/C++
    !original:     1 0 1 1 0 0 1 0  (d_isValid)
    !index(or ii): 1 2 3 4 5 6 7 8
    !prefix sum:   1 1 2 3 3 3 4 4  (inclusive d_indices)
    !numElements:  8 (np_active)
    !Dimension of d_out can be determined by prefix sum, such as d_indices(np_active) = 4
    !Coalesced access to global memory or not is determined by ???

    implicit none
    real(8),intent(out):: d_out(:,:)
    real(8),intent(in):: d_in(:,:)
    real(8),intent(in):: d_indices(:), d_isValid(:)
    integer,value::numElements, n_attri
    integer:: ii, j   !global index in the array

    ii = (blockIdx%x - 1) * blockDim%x + threadIdx%x
!
    if(ii <= numElements .and. idnint(d_isValid(ii)) > 0) then
        do j = 1, n_attri
            d_out(idnint(d_indices(ii)),j) = d_in(ii,j)
        enddo
    end if

    end subroutine compaction_copy

    attributes(global) subroutine prepare_holes(holes,d_indices,d_isValid,&
                                                numElements)
    !original:        1 0 1 1 0 0 1 0  d_isValid
    !index(or ii):    1 2 3 4 5 6 7 8  ii
    !prefix sum:      1 1 2 3 3 3 4 4  d_indices
    !ii-d_indices:    0 1 1 1 2 3 3 4
    !N-sum(index):    3 3 2 1 1 1 0 0  d_indices(numElements)-d_indices
    !N-sum(index)+1:  4 4 3 2 2 2 1 1  ii2
    !numElements:     8
    !holes:           2 5 6 8
    !holes index:     1 2 3 4

    implicit none
    real(8),intent(in):: d_indices(:), d_isValid(:)
    integer,intent(out):: holes(:)
    !dimension is determined by np_active - d_indices(np_active)
    !np_active is numElements
    !holes is a temporary array that just needs dynamic allocation on cpu
    integer:: ii   !global index in the array
    integer,value:: numElements

    ii = (blockIdx%x - 1) * blockDim%x + threadIdx%x
    if(ii <= numElements .and. idnint(d_isValid(ii)) == 0) then
        holes(ii - idnint(d_indices(ii))) = ii
    end if

    end subroutine prepare_holes

    attributes(global) subroutine compaction_inplace(holes,d_indices,d_isValid,&
                                                     d_in,numElements,n_attri)
    !original:        1 0 1 1 0 0 1 0  d_isValid
    !index(or ii):    1 2 3 4 5 6 7 8  ii
    !prefix sum:      1 1 2 3 3 3 4 4  d_indices
    !ii-d_indices:    0 1 1 1 2 3 3 4
    !N-sum(index):    3 3 2 1 1 1 0 0  d_indices(numElements)-d_indices
    !N-sum(index)+1:  4 4 3 2 2 2 1 1  ii2
    !numElements:     8
    !holes:           2 5 6 8
    !holes index:     1 2 3 4

    implicit none
    real(8),intent(inout):: d_in(:,:)
    real(8),intent(in):: d_indices(:), d_isValid(:)
    integer,intent(in):: holes(:)
    !dimension is determined by np_active - d_indices(np_active)
    !np_active is numElements
    !holes is a temporary array that just needs dynamic allocation on cpu
    integer:: ii, ii2, j   !global index in the array
    integer,value:: numElements, n_attri

    ii = (blockIdx%x - 1) * blockDim%x + threadIdx%x
    ii2 = idnint(d_indices(numElements)) - idnint(d_indices(ii)) + 1

    if(ii <= numElements .and. idnint(d_isValid(ii)) > 0 .and. &
       holes(ii2) <= idnint(d_indices(numElements))) then
        do j = 1, n_attri-2
            d_in(holes(ii2),j) = d_in(ii,j)
        enddo
    end if

    end subroutine compaction_inplace
end module compact_array