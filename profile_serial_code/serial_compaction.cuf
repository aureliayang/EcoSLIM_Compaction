program serial_compaction
    use cudafor

    implicit none

    integer:: ii, np_active, np_active2, npout, N=80000000
    real(8),allocatable::P_origional(:,:), P(:,:)
    integer:: i, j, ncount=0, istat

    type (cudaEvent) :: startEvent, stopEvent
    real:: time1_total=0., time2_total=0., time3_total=0.
    real:: time1, time2, time3

    istat = cudaEventCreate(startEvent)
    istat = cudaEventCreate(stopEvent)

    ! read or create P array
    allocate(P_origional(N,10),P(N,10))

    do i = 1, N
        do j = 1, 10
            ncount = ncount + 1
            P_origional(i,j) = dble(ncount)
        enddo
    enddo
    do i = 1, N/8
        P_origional((i-1)*8+1:i*8,8) = [1.d0, 0.d0, 1.d0, 1.d0, 0.d0, 0.d0, 1.d0, 0.d0]
    enddo

    do i = 1, 30

        np_active  = N
        np_active2 = np_active
        P = P_origional

        istat = cudaEventRecord(startEvent, 0)

        npout = 0
        do ii = 1, np_active
            ! check if particle is inactive
            if (P(ii,8) == 0.0) then
                do while(P(ii,8) == 0.0)
                    npout = npout + 1
                    P(ii,:) = P(np_active2,:)
                    np_active2 = np_active2 -1
                enddo
            end if
            ! if we have looped all the way through our active particles exit
            if (ii > np_active2) exit
        end do ! particles
        np_active = np_active2

        istat = cudaEventRecord(stopEvent, 0)
        istat = cudaEventSynchronize(stopEvent)
        istat = cudaEventElapsedTime(time1, startEvent, stopEvent)

        time1_total = time1_total + time1
    end do

    time1_total = time1_total/30.d0
    write(*,'(a,3(f8.3,1x))') 'Time used (ms):', time1_total

    istat = cudaEventDestroy(startEvent)
    istat = cudaEventDestroy(stopEvent)

    write(*,'(a,/,100(8(f13.1,1x),/))') "After compact in-place:", P(1:800,1)

end program serial_compaction